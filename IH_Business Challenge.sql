
-- Query #1 Which branch has the highest total sales revenue?
-- This query calculates the total sales revenue for each branch and orders the results in descending order
-- to identify the branch with the highest total sales revenue.

SELECT branch, sum(sale_id) AS total_sales_revenue
FROM sales
GROUP BY branch
ORDER BY total_sales_revenue DESC
    
-- Query #1 result: Data shows us that branch A more than doubles the sales revenue of branch B.

-- Query #2 What is the most purchased product category across all branches?
-- This query calculates the total sales for each product category and orders the results in descending order.

SELECT product_category, SUM(total_price) AS total_sales
FROM Sales
GROUP BY product_category
ORDER BY total_sales
DESC LIMIT 5;

-- Query #2 result: Based on the data retrieved, the product category with more sales accross the branches is Personal care.

-- Query #3 Do members or normal customers spend more on average per transaction?
-- This query calculates the average amount spent per transaction for each customer type
-- by grouping transactions based on `customer_type`.
 
SELECT customer_type, AVG(total_price) AS avg_spent_per_transaction 
FROM supermarket_sales.sales
GROUP BY customer_type;

-- Query #3 result: The results indicate that normal costumers spend on average $2 more than the members.

-- Query #4 How does the quantity purchased vary by product category?
-- This query counts the total number of transactions for each product category.
-- it uses `COUNT(quantity)` to measure how often products from a specific category are purchased.

SELECT product_category, count(quantity) AS quantity_purchased
FROM supermarket_sales.sales
GROUP BY product_category;

-- Query #4 result: Fruits: 418, Personal care: 416, Stationary: 396, Household: 396 and Beverages: 374. 
-- The highest quantity of purchased products seem to be products of every day necesities, prioritizing on food, then personal care.

-- Query #5 Are there differences in total sales revenue between male and female customers?
-- This query calculates the total revenue generated by each gender.
-- The revenue is calculated by subtracting `unit_price` (cost per unit) from `total_price` (sales price).
-- The results are grouped by `gender` to compare total revenue between males and females.

SELECT gender, SUM(total_price - unit_price) AS total_revenue
FROM supermarket_sales.sales
GROUP BY gender;

-- Query #5 result: The results indicate that males significantly contribute more to the total revenue than females. Male: $116,825, Female: $98,669

-- Query #6 Which product has the highest average unit price?
-- This query identifies the products with the highest average unit price by calculating the mean unit price for each product
-- and returning the top 5 products with the highest average prices.

SELECT product_name, AVG(unit_price) AS high_average_unit_price
FROM supermarket_sales.sales
GROUP BY product_name
ORDER BY high_average_unit_price DESC
LIMIT 5;

-- Query #6 result: the data suggests that the product with the higher average unit price is shampoo at an average of $11.68.

-- Query #7 How do reward points earned correlate with total price spent?
-- This SQL query retrieves the `reward_points` and `total_price` columns from the `sales` table.
-- The data is then used to calculate the correlation between these two variables in Python.

SELECT 
    reward_points, 
    total_price 
FROM 
    supermarket_sales.sales; 
    
-- Python code used:
-- # Import necessary libraries
-- import pandas as pd
-- # Define the SQL query to fetch reward points and total price
-- query = "SELECT reward_points, total_price FROM supermarket_sales.sales;"
-- # Execute the SQL query and load the results into a pandas DataFrame
-- df = pd.read_sql(query, conn)  # `conn` is the connection object to the SQL database
-- # Calculate the correlation coefficient between reward points and total price
-- # Using the .corr() method to find the Pearson correlation coefficient
-- correlation = df['reward_points'].corr(df['total_price'])
-- # Print the result with a rounded value for clarity
-- print(f"Correlation between reward points and total price: {round(correlation, 1)}")

-- Query #7 result: When evaluating correlation, there seems to be a moderate correlation between the reward points earned 
-- and the total price spent on a grocery trip of about 0.6 (rounded). The scatter plot generated suggests that for every 
-- $100 spent on groceries the rewards points earned duplicate (i.e. $100 -> 10 reward points, $200 -> 20 reward points, etc. )

-- Query #8 What is the total tax collected per branch?
-- This query calculates the total tax collected for each branch by summing the `tax` column
-- and grouping the data by branch to display the results per branch.

SELECT branch, SUM(tax) AS total_tax_collected 
FROM sales 
GROUP BY branch 
ORDER BY branch; 

-- Query #8 result: The total tax collected for branch A: $10,835.54, and for branch B: $4,680.48 

-- Query #9 What is the average quantity purchased per transaction for each product category?
-- This query calculates the average quantity of items purchased for each product category
-- and organizes the results alphabetically by product category.

SELECT product_category, 
    AVG(quantity) AS avg_quantity_purchased 
FROM sales 
GROUP BY product_category 
ORDER BY product_category; 

-- Query #9 result: Beverages: 10.4385, Fruits:	10.9378, Household:	9.6364, Personal Care:	10.9519, and Stationery: 9.6616

-- Query #10 Which city has the highest percentage of sales contributed by members?
-- This query calculates the percentage of total sales in each city that are contributed by members.
-- It evaluates each sale to check if the customer type is 'Member' and uses this information to 
-- calculate the member contribution percentage.

SELECT city, 
    SUM(CASE WHEN customer_type = 'Member' THEN total_price ELSE 0 END) AS member_sales,  
    SUM(total_price) AS total_sales, 
    ROUND((SUM(CASE WHEN customer_type = 'Member' THEN total_price ELSE 0 END) / SUM(total_price)) * 100, 0) AS member_sales_percentage 
    FROM sales 
GROUP BY city 
ORDER BY member_sales_percentage DESC; 

-- Query #10 result: the reslts show that Chicago has the highest percentage of sales contributed by members.
